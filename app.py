import streamlit as st
import json
from utils.gs import get_all_data_from_sheet, update_timestamp_by_row_idx
import random
import pandas as pd
from datetime import datetime, timedelta
import joblib

flashcards = []

# Ki·ªÉm tra n·∫øu ch∆∞a c√≥ 'uid' v√† 'gid' trong session_state
if "uid" not in st.session_state or "gid" not in st.session_state:
    st.sidebar.header("Upload JSON Config")
    uploaded_file = st.sidebar.file_uploader("Please upload a JSON file with 'uid' and 'gid'", type="json")
    
    # X·ª≠ l√Ω file JSON ƒë√£ t·∫£i l√™n
    if uploaded_file is not None:
        config = json.load(uploaded_file)
        st.session_state.uid = config.get("uid")
        st.session_state.gid = config.get("gid")

        # L·∫•y d·ªØ li·ªáu t·ª´ Google Sheet v√† l∆∞u v√†o session_state
        if st.session_state.uid and st.session_state.gid is not None:
            flashcards = get_all_data_from_sheet(uid=st.session_state.uid, gid=st.session_state.gid)
            
            # Chuy·ªÉn ƒë·ªïi c·ªôt `gold_time` v·ªÅ ƒë·ªãnh d·∫°ng ng√†y n·∫øu ch∆∞a c√≥
            for card in flashcards:
                card['gold_time'] = pd.to_datetime(card.get('gold_time', '1900-01-01'), errors='coerce')

            # S·∫Øp x·∫øp th·∫ª d·ª±a tr√™n y√™u c·∫ßu:
            today = pd.Timestamp.now()
            flashcards.sort(
                key=lambda x: (
                    (x['gold_time'] - today).days if x['gold_time'] < today else float('inf'),  # gold_time g·∫ßn nh·∫•t ƒë√£ v∆∞·ª£t qua
                    x['gold_time'] if x['gold_time'] >= today else float('inf'),  # gold_time s·∫Øp ƒë·∫øn h·∫°n
                    -x['gold_time'].toordinal() if pd.notna(x['gold_time']) else 0  # gold_time xa nh·∫•t
                )
            )
            st.session_state.flashcards = flashcards
        else:
            st.error("JSON file does not contain 'uid' or 'gid'. Please upload a valid JSON file.")
else:
    # N·∫øu d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n v√† c√≥ trong session_state
    flashcards = st.session_state.get("flashcards", [])

# T·∫£i m√¥ h√¨nh ARIMA ƒë√£ l∆∞u
def load_arima_model():
    try:
        model = joblib.load("model/arima.pkl")
        return model
    except FileNotFoundError:
        st.error("Model file not found. Please ensure the model file exists.")
        return None

# H√†m d·ª± b√°o th·ªùi gian luy·ªán t·∫≠p ti·∫øp theo
def predict_next_gold_time(model, last_timestamp):
    forecast = model.forecast(steps=1)
    next_gap_days = forecast.iloc[0]  # Kho·∫£ng c√°ch ng√†y d·ª± b√°o
    return last_timestamp + timedelta(days=next_gap_days)

# N·∫øu flashcards c√≥ d·ªØ li·ªáu, ti·∫øp t·ª•c hi·ªÉn th·ªã th·∫ª
if flashcards:
    # Kh·ªüi t·∫°o tr·∫°ng th√°i c·ªßa th·∫ª
    if "index" not in st.session_state:
        st.session_state.index = 0
    if "show_back" not in st.session_state:
        st.session_state.show_back = False

    # T·∫£i m√¥ h√¨nh ARIMA t·ª´ file
    model = load_arima_model()

    # H√†m ƒë·ªÉ l·∫≠t th·∫ª (m·∫∑t tr∆∞·ªõc -> m·∫∑t sau)
    def flip_card():
        if not st.session_state.show_back:
            st.session_state.show_back = True
        else:
            # L·∫•y th·ªùi gian hi·ªán t·∫°i
            current_time = pd.Timestamp.now()
            
            # D·ª± ƒëo√°n th·ªùi gian luy·ªán t·∫≠p ti·∫øp theo n·∫øu c√≥ model
            if model:
                gold_time = predict_next_gold_time(model, current_time)
            else:
                gold_time = current_time + timedelta(days=2)  # Gi·∫£ ƒë·ªãnh n·∫øu kh√¥ng c√≥ m√¥ h√¨nh

            # C·∫≠p nh·∫≠t th·ªùi gian l·∫≠t trong Google Sheet
            update_timestamp_by_row_idx(
                uid=st.session_state.uid, 
                gid=st.session_state.gid, 
                row_idx= flashcards[st.session_state.index]["row_idx"],
                timestamp= gold_time.strftime('%Y-%m-%d %H:%M:%S')
            )
            next_card()
        
    # H√†m ƒë·ªÉ l·∫•y th·∫ª ti·∫øp theo
    def next_card():
        st.session_state.index = (st.session_state.index + 1) % len(flashcards)
        st.session_state.show_back = False

    # H√†m ƒë·ªÉ l·∫•y th·∫ª tr∆∞·ªõc ƒë√≥
    def prev_card():
        st.session_state.index = (st.session_state.index - 1) % len(flashcards)
        st.session_state.show_back = False

    # L·∫•y th·∫ª hi·ªán t·∫°i d·ª±a v√†o ch·ªâ s·ªë
    card = flashcards[st.session_state.index]

    # T√πy ch·ªânh CSS cho h·ªôp th·∫ª
    st.markdown(
        """
        <style>
        .flashcard-box {
            border: 2px solid black;
            padding: 80px 20px;
            border-radius: 10px;
            background-color: #f9f9f9;
            text-align: center;
            margin: 10px 0;
            font-size: 20px;
            color: black;
            position: relative;
        }
        b{
            color: red;
        }
        .gold_time{
            position: absolute;
            right: 20px;
            bottom: 10px;
            font-size: 14px;
        }
        </style>
        """, unsafe_allow_html=True
    )

    # Hi·ªÉn th·ªã m·∫∑t tr∆∞·ªõc ho·∫∑c m·∫∑t sau c·ªßa th·∫ª d·ª±a v√†o tr·∫°ng th√°i
    if st.session_state.show_back:
        example_text = card['example'].replace('"', '<b>', 1).replace('"', '</b>', 1)
        st.markdown(f"""<div class='flashcard-box'>{card['word']}<br>{card['meaning']}<br>{example_text}</div>""", unsafe_allow_html=True)
    else:
        st.markdown(f"<div class='flashcard-box'>{card['word']}<span class='gold_time'>gold time: {card['gold_time']}</span></div>", unsafe_allow_html=True)

    # Hi·ªÉn th·ªã c√°c n√∫t trong container ngang h√†ng
    with st.container():
        col1, col2, col3 = st.columns(3)
        with col1:
            st.button("‚¨ÖÔ∏è Back", on_click=prev_card, use_container_width=True)
        with col2:
            st.button("üî• Flip", on_click=flip_card, use_container_width=True)
        with col3:
            st.button("‚û°Ô∏è Next", on_click=next_card, use_container_width=True)

else:
    # Th√¥ng b√°o y√™u c·∫ßu ng∆∞·ªùi d√πng t·∫£i l√™n file JSON n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu
    st.warning("Please upload a JSON file with 'uid' and 'gid' in the sidebar to load flashcards.")
